---노션---
https://incredible-guan-388.notion.site/Spring-Reactive-90f1d8195ce54518948b18da806b8001
## *Reactive Spring*

http://microservices.io/patterns

### 기본 원리

분산 시스템에서 구현되는 모든 비지니스의 핵심 가치는 응답성

시스템이 높은 응답성을 확보한다는 것은 탄력성 및 복원력 같은 기본 기법을 다른다는 의미

마지막으로 응답성, 탄력성 및 복원력을 모두 확보하는 기본적인 방법의 하나는 메세지 기반 통신을 사용하는 것

이러한 원칙에 따라 구축된 시스템은 모든 구성 요소가 독립적이고 적절하게 격리돼 있기 때문에 유지 보수 및 확장이 매우 용이

## *Reactor Project*

리액티브 스트림 스펙에 의해 도입된 중요한 개선 사항이 많음에도 불구하고, 스펙은 API 및 규칙만 정의하고 일상적인 사용을 위한 라이브러리는 제공하지 않음

**구현체를 제공하는 프로젝트**

[Reactor 3 Reference Guide](https://projectreactor.io/docs/core/release/reference/#which-operator)

### 1.x

장점

- 채널을 구독하고 들어오는 모든 이벤트를 단계적으로 처리하는 이전과 다르게, 리액티브 프로그래밍 기법을 사용해 선언적 처리 흐름을 만듦
- 그 당시 이벤트를 빠른 속도로 처리하기에 충분
- 스프링 프레임워크와의 완벽한 통합 및 네티와의 결합을 통해 비동기 및 논블로킹 메세지 처리를 제공하는 고성능 시스템 개발 가능

단점

- 라이브러이에 배압 조절 기능 없음
    - 프로듀서 스레드를 차단하거나 이벤트를 생략하는 것 이외에 다른 배압 제어 방법을 제공하지 못함
- 오류 처리 복잡

### 2.x

장점

- 스트림을 생성하고 소비하는 간단한 추가 사항 외에도 배압 관리, 스레드 처리, 복원력 지원 등 다양한 기능 추가

### 3.x

자바 8을 기준으로 기능 제공

스프링 프레임워크 5의 리액티브적인 변형을 담당

[기본목표](https://www.notion.so/Spring-Reactive-90f1d8195ce54518948b18da806b8001?pvs=21)

[특징](https://www.notion.so/Spring-Reactive-90f1d8195ce54518948b18da806b8001?pvs=21)

[리액티브 타입](https://www.notion.so/Spring-Reactive-90f1d8195ce54518948b18da806b8001?pvs=21)

[수명주기](https://www.notion.so/Spring-Reactive-90f1d8195ce54518948b18da806b8001?pvs=21)

[스레드 스케줄링](https://www.notion.so/Spring-Reactive-90f1d8195ce54518948b18da806b8001?pvs=21)

### 기본목표

- 코드 가독성을 높인다.
- 라이브러리에 의해 정의된 workflow에 조합성(composability)을 추가한다.
- 성능을 고려한 다양한 종류의 연산자를 제공한다.

### 특징

- 리액터 API는 연산자를 연결해서 사용하는 것을 권장
    - 이를 통해복잡하고 잠재적으로 재사용 가능한 실행 그래프를 작성
    - 실행 그래프는 실행 흐름만 정의하지만, 구독자가 실제로 구독을 만들때까지 아무 일도 발생하지 않으므로 **실제 구독을 했을때만 data flow가 기동**
- 오류가 발생할 가능성이 있는 비동기 요청의 결과를 효율적으로 처리할 수 있도록 설계됨
    
    ![IMG_0339.jpg](https://prod-files-secure.s3.us-west-2.amazonaws.com/a156cc82-d201-4160-ac40-16f8ab23f7dc/0e372873-2b77-4c69-ae41-b4edcbde7ca8/IMG_0339.jpg)
    
- **배압**
    - 푸시 전용 : 구독자가 효과적으로 무한한 숫자를 요청하는 경우
    - 풀 전용 : 구독자가 이전 요소를 받은 후에만 다음 요소를 요청하는 경우
    - 풀-푸시 전용(혼합형) : 구독자가 수요를 실시간 제어할 수 있고 게시자가 데이터 소비 속도에 적응할 수 있는 경우
    

### 리액티브 타입

**Flux**

![flux.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/a156cc82-d201-4160-ac40-16f8ab23f7dc/b87bd3d7-1526-45a6-881e-ecaec00a7221/flux.png)

- 0, 1 또는 여러 요소를 생성할 수 있는 일반적인 리액티브 스트림

**Mono**

![mono.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/a156cc82-d201-4160-ac40-16f8ab23f7dc/3d882a18-8356-41bf-a1ff-d3211bb2da18/mono.png)

- Flux와 달리 Mono는 최대 하나의 요소를 생성할 수 있는 스트림

### 리액티브 스트림의 수명 주기

**리액터 API**

- 불변성(Immutability)을 제공
    - 적용된 각각의 연산자가 새로운 객체를 생성

**조립 단계**

- 리액티브 라이브러리에서 실행 흐름을 작성하는 프로세스를 조립(assempling)이라고 함
- 스트림 구성을 조작하고 리액티브 시스템을 구축하는데 필수적인 디버깅 최적화나 모니터링, 더 나은 스트림 전달을 위한 다양한 기술을 적용할 수 있는 단계

```java
Flux.just().map().filter();

Flux<Integer> sourceFlux = new FluxArray(1, 20, 300, 4000);
Flux<String> mapFlux = new FluxMap(sourceFlux, String::valueOf);
Flux<String> filterFlux = new FluxFilter(mapFlux, s -> s.length() > 1);

FluxFilter(
		FluxMap(
		    FluxArray(1, 2, 3, 40, 500, 6000)
    )
)
```

**구독 단계**

- 특정 Publisher를 구독할 때 발생
- 조립 단계와 동일한 최적화를 수행할 수 있음
- 리액터에서 멀티 스레딩을 지원하는 일부 연산자는 구독이 발생하는 작업자를 변경할 수 있음

```java
filteredFlux.subscribe(...);

filterFlux.subscribe(Subscriber) {
		mapFlux.subscribe(new FilterSubscriber(Subscriber)) {
				arrayFlux.subscribe(new MapSubscriber(FilterSubscriber(Subscriber))) {
						// 여기에서 실제 데이터를 송신하기 시작
				}
		}
}

ArraySubscriber(
		MapSubscriber(
				FilterSubscriber(
						Subscriber
				)
		)
)
```

**런타임 단계**

- 게시자와 구독자 간에 실제 신호가 교환
- 게시자와 구독자가 교환하는 처음 두 신호는 onSubscribe 시그널과 request 시그널
- 런타임 중에 신호 교환량을 줄이기 위한 최적화를 적용할 수 있음

```java
// onSubscribe
MapSubscriber(FilterSubscriber(Subscriber)).onSubscribe(
		new ArraySubscription()
) {
		FilterSubscriber(Subscriber).onSubscribe(
				new MapSubscription(ArraySubscription(...))
		) {
				Subscriber.onSubscribe(
						FilterSubscription(MapSubscription(ArraySubscription(...)))
				) {
						// 여기에 요청 데이터를 기술
				}		
		}
}

FilterSubscription(
		MapSubscription(
				ArraySubscription()
		)
)

// request
FilterSubscription(MapSubscription(ArraySubscription(...)))
		.request(10) {
				MapSubscription(ArraySubscription(...))
						.request(10) {
								ArraySubscription(...)
										.request(10) {
												// 데이터 전송 시작
										}
						}
		}

ArraySubscription.request(10) {
		MapSubscriber(FilterSubscriber(Subscriber)).onNext(1) {
				// 데이터 변환 로직을 작성
				FilterSubscriber(Subscriber).onNext("1") {
						// 필터 처리
						// 원소가 일치하지 않으면
						// 추가 데이터를 요청
						MapSubscription(ArraySubscription(...)).request(1) {...}
				}
		}

		MapSubscriber(FilterSubscriber(Subscriber)).onNext(20) {
				// 데이터 변환 로직을 작성
				FilterSubscriber(Subscriber).onNext("20") {
						// 필터 처리
						// 원소가 일치하면
						// 다운스트림 구독자에게 전송
						Subscriber.onNext("20") {...}
				}
		}
}
```

### 스레드 스케줄링

publishOn

subscribeOn

parallel

## *Spring WebFlux*

Spring Framework에 포함된 오리지날 웹 프레임워크인 Spring Web MVC는 Servlet API 및 Servlet 컨테이너를 위해 특별히 제작되었다. 반응형-스택 웹 프레임워크인 Spring WebFlux는 5.0버전부터 추가되었다. Spring WebFlux는 non-blocking이며 Reactive Streams back pressure를 지원하고 Netty, Undertow, Servlet 3.1+ 컨테이너와 같은 서버에서 실행된다.

## *내용*

## *참고*

[스프링 웹플럭스(WebFlux) SSE(Server Sent Event) 구현 2](https://javacan.tistory.com/entry/spring-webflux-server-sent-event-2)

[배달의민족 최전방 시스템! '가게노출 시스템'을 소개합니다. - 우아한형제들 기술 블로그](https://woowabros.github.io/experience/2020/02/19/introduce-shop-display.html)
